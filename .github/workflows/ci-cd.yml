name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black==23.12.1 isort==5.13.2 flake8==7.0.0
          pip install -e .[dev]

      - name: Format with black
        run: |
          black src/ tests/
          git diff --exit-code

      - name: Sort imports with isort
        run: |
          isort src/ tests/
          git diff --exit-code

      - name: Run flake8
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203

  security-scans:
    needs: quality-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit==1.7.7 safety==2.3.5
          pip install -e .[dev]

      - name: Run Bandit security scan
        run: bandit -r src/ -ll -ii -x tests/

      - name: Run Safety check
        run: safety check

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build-deploy:
    needs: security-scans
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build==1.0.3 wheel==0.42.0
          pip install -e .[dev]

      - name: Run tests
        run: |
          pytest tests/ --cov=src --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

      - name: Build package
        run: python -m build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 5

      - name: Deploy to PyPI
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install twine==4.0.2
          twine upload dist/*

      - name: Set up Cloud SDK
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/defect-detection:${{ github.sha }} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/defect-detection:${{ github.sha }}

      - name: Deploy to Cloud Run
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: defect-detection
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/defect-detection:${{ github.sha }}
          region: us-central1
          env_vars: |
            GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }}
            MODEL_BUCKET=${{ secrets.MODEL_BUCKET }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
