name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  DOCKER_IMAGE: defect-detection
  GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  SERVICE_NAME: defect-detection-service
  SECRET_KEY: ${{ secrets.APP_SECRET_KEY }}
  MODEL_BUCKET: ${{ secrets.GCP_MODEL_BUCKET }}

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8
          pip install -r requirements.txt
          
      - name: Check formatting
        run: |
          black . --check --exclude="labelImg/|\.git/"
          isort . --check --skip labelImg --skip .git
          
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=labelImg/,venv/,.git/
          flake8 . --count --exit-zero --max-complexity=10 --statistics --exclude=labelImg/,venv/,.git/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
          
      - name: Create test data
        run: |
          python tests/create_test_images.py
          
      - name: Run tests with coverage
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest tests/ --cov=src --cov-report=xml
        env:
          SECRET_KEY: ${{ env.SECRET_KEY }}
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  train:
    name: Train and Evaluate Model
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
          
      - name: Create data directories
        run: |
          mkdir -p data/labeled
          
      - name: Download training data
        run: |
          gsutil -m cp -r gs://${{ env.MODEL_BUCKET }}/data/labeled/* ./data/labeled/
        continue-on-error: true
          
      - name: Train model
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd) python train.py
          
      - name: Evaluate model
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd) python evaluate.py
          
      - name: Upload model artifacts
        run: |
          gsutil -m cp -r ./models/* gs://${{ env.MODEL_BUCKET }}/models/
          gsutil -m cp ./metrics.json gs://${{ env.MODEL_BUCKET }}/metrics/$(date +%Y%m%d_%H%M%S).json
        continue-on-error: true

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          build-args: |
            SECRET_KEY=${{ env.SECRET_KEY }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build, train]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.GCP_REGION }}
          image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          env_vars: |
            SECRET_KEY=${{ env.SECRET_KEY }}
            MODEL_BUCKET=${{ env.MODEL_BUCKET }}
          
      - name: Show Output URL
        run: echo ${{ steps.deploy.outputs.url }}
